class Solution {
public:
    int search(vector<int>& a, int k) {
        int l1,l2,r1,r2;
        if(a.size()==0)
            return -1;
        if(a.size()<2)
        {
            for(int i=0;i<a.size();i++){
                if(a[i]==k)
                    return i;
            }
            return -1;
        }
        int i=0;
        l2=1;
        while(a[i]<a[l2]&&l2<a.size()-1){
            i++;
            l2++;
        }
        l1=0;
        //cout<<l2;
        r1=l2-1;
        while(l1<=r1){
            int mid=l1+(r1-l1)/2;
            if(a[mid]==k)
                return mid;
            else if(a[mid]>k)
                r1=mid-1;
            else
                l1=mid+1;
                
        }
        r2=a.size()-1;
        while(l2<=r2){
            int mid=l2+(r2-l2)/2;
            if(a[mid]==k)
                return mid;
            else if(a[mid]>k)
                r2=mid-1;
            else
                l2=mid+1;
                
        }
        
        
        
        return -1;
        
    }
};




faster solution:~
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int l = 0;
        int n = nums.size();
        int r = n-1;
        int mid = 0;
        
        while(l <= r) {
            mid = l + (r-l)/2;
            
            /*
            If Target is found mid then return the index of mid. At any time one side of the mid index will be sorted.
            Check if target exists in that section or not and update left and right accordingly.
            */
            if(target == nums[mid])
                return mid;
            else if(nums[mid] >= nums[l])
                target >= nums[l] && target <= nums[mid] ? r = mid-1 : l = mid+1;
            else
                target >= nums[mid] && target <= nums[r] ? l = mid+1 : r = mid-1;
        }
        
        return -1;
    }
};














